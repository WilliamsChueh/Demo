{"report": {"environment": {"Python": "3.7.2", "Platform": "Windows-2012ServerR2-6.3.9600-SP0"}, "tests": [{"name": "test_ST1_7.py::DATASET::test_ST1_7", "duration": 19.40408968925476, "run_index": 0, "setup": {"name": "setup", "duration": 6.731856346130371, "outcome": "passed"}, "call": {"name": "call", "duration": 5.9403769969940186, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_ST3_1.py::DATASET::test_ST3_1", "duration": 2.526416778564453, "run_index": 1, "setup": {"name": "setup", "duration": 0.0010027885437011719, "outcome": "passed"}, "call": {"name": "call", "duration": 2.524411201477051, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_ST3_2.py::DATASET::test_ST3_2", "duration": 4.6943159103393555, "run_index": 2, "setup": {"name": "setup", "duration": 0.0009965896606445312, "outcome": "passed"}, "call": {"name": "call", "duration": 4.691321849822998, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0010008811950683594, "outcome": "passed"}, "outcome": "passed"}, {"name": "test_ST3_6.py::DATASET::test_ST3_6", "duration": 532.8908104896545, "run_index": 3, "setup": {"name": "setup", "duration": 0.0009980201721191406, "outcome": "passed"}, "call": {"name": "call", "duration": 529.9719161987305, "outcome": "failed", "longrepr": "self = <test_ST3_6.DATASET testMethod=test_ST3_6>\n\n    def test_ST3_6(self):\n        try:\n            element_is_displayed = False\n            time.sleep(5)\n>           element_is_displayed = DataSet(self.driver).ST3_6()\n\ntest_ST3_6.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <module.DATASET_Objects.DataSet object at 0x09636B30>\n\n    def ST3_6(self):\n        word = \"none\"\n        word2 = \"none\"\n        while (word2 == \"none\"):\n            try:\n                word = self.driver.find_element_by_css_selector('#ModalHistory').get_attribute(\"outerHTML\").split(\"style=\")[1].split(\":\")[1].split(\";\")[0].split(\" \")[1]\n                if (word == \"none\" and word2 == \"none\"):\n                    #  \u9ede\u64ca\u9810\u89bd\u7d50\u679c  #\n                    WebDriverWait(self.driver, wait).until(\n                        EC.element_to_be_clickable((By.CSS_SELECTOR, \"body > app-root > app-golden-main > app-golden-content > main > div > div > aside.block-export > div > div.card-footer > div.btn-group-individual > a.btn.btn-sm.btn-dark\")))\n                    self.driver.find_element_by_css_selector(\"body > app-root > app-golden-main > app-golden-content > main > div > div > aside.block-export > div > div.card-footer > div.btn-group-individual > a.btn.btn-sm.btn-dark\").click()\n                    word2 = \"click\"\n                time.sleep(0.5)\n            except TimeoutException as ac:\n                time.sleep(0.1)\n            except ElementClickInterceptedException as ece:\n                time.sleep(0.1)\n        element_is_displayed = False\n        while (element_is_displayed == False):\n            try:\n                time.sleep(0.1)\n                WebDriverWait(self.driver, wait).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"#PreHotTable\")))\n>               element_is_displayed = self.driver.find_element_by_css_selector(\"#PreHotTable\").is_displayed()\n\nmodule\\DATASET_Objects.py:728: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"8ff6c1266f13426e20359d84846e14e8\", element=\"0.5508990407696195-18\")>\n\n    def is_displayed(self):\n        \"\"\"Whether the element is visible to a user.\"\"\"\n        # Only go into this conditional for browsers that don't use the atom themselves\n        if self._w3c:\n            return self.parent.execute_script(\n                \"return (%s).apply(null, arguments);\" % isDisplayed_js,\n                self)\n        else:\n>           return self._execute(Command.IS_ELEMENT_DISPLAYED)['value']\n\nC:\\Users\\flash_WC\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:490: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"8ff6c1266f13426e20359d84846e14e8\", element=\"0.5508990407696195-18\")>\ncommand = 'isElementDisplayed'\nparams = {'id': '0.5508990407696195-18', 'sessionId': '8ff6c1266f13426e20359d84846e14e8'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nC:\\Users\\flash_WC\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8ff6c1266f13426e20359d84846e14e8\")>\ndriver_command = 'isElementDisplayed'\nparams = {'id': '0.5508990407696195-18', 'sessionId': '8ff6c1266f13426e20359d84846e14e8'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\flash_WC\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x09317E50>\nresponse = {'sessionId': '8ff6c1266f13426e20359d84846e14e8', 'status': 10, 'value': {'message': 'stale element reference: element...iver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Windows NT 6.3.9600 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=75.0.3770.100)\nE         (Driver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Windows NT 6.3.9600 x86_64)\n\nC:\\Users\\flash_WC\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_ST3_6.DATASET testMethod=test_ST3_6>\n\n    def test_ST3_6(self):\n        try:\n            element_is_displayed = False\n            time.sleep(5)\n            element_is_displayed = DataSet(self.driver).ST3_6()\n            time.sleep(2)\n            assert element_is_displayed==True\n        except NoSuchElementException as ec:\n            print(ec)\n            self.driver.get(\"http://\" + url)\n            assert 1 == 0\n        except TimeoutException as ac:\n            pass\n            self.driver.get(\"http://\" + url)\n            print(traceback.format_exc())\n            assert 1 == 0\n        except Exception as e:\n            self.driver.get(\"http://\" + url)\n            print(e)\n>           assert 1 == 0\nE           AssertionError: assert 1 == 0\n\ntest_ST3_6.py:62: AssertionError", "stdout": "Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=75.0.3770.100)\n  (Driver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Windows NT 6.3.9600 x86_64)\n\n"}, "teardown": {"name": "teardown", "duration": 2.916898250579834, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 3, "failed": 1, "num_tests": 4, "duration": 553.530526638031}, "created_at": "2019-07-11 11:18:33.414838"}}